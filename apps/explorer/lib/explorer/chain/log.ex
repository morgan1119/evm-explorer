defmodule Explorer.Chain.Log do
  @moduledoc "Captures a Web3 log entry generated by a transaction"

  use Explorer.Schema

  alias Explorer.Chain.{Address, Hash, Receipt}

  @required_attrs ~w(address_hash data index type)a
  @optional_attrs ~w(first_topic second_topic third_topic fourth_topic)a

  schema "logs" do
    field(:data, :string)
    field(:first_topic, :string)
    field(:fourth_topic, :string)
    field(:index, :integer)
    field(:second_topic, :string)
    field(:third_topic, :string)
    field(:type, :string)

    timestamps()

    belongs_to(:address, Address, foreign_key: :address_hash, references: :hash, type: Hash.Truncated)
    belongs_to(:receipt, Receipt)
    has_one(:transaction, through: [:receipt, :transaction])
  end

  def changeset(%__MODULE__{} = log, attrs \\ %{}) do
    log
    |> cast(attrs, @required_attrs)
    |> cast(attrs, @optional_attrs)
    |> cast_assoc(:address)
    |> cast_assoc(:receipt)
    |> validate_required(@required_attrs)
  end
end
